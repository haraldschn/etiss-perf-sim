;; using performance estimator plugin category
[Plugin PerformanceEstimatorPlugin]
;; memory ports
plugin.perfEst.memory.DPort.nregions=3 ; <- number of regions
plugin.perfEst.memory.DPort.region0.path=D_NON_CACHABLE
plugin.perfEst.memory.DPort.region0.end =0x80000000
plugin.perfEst.memory.DPort.region1.path=L1D L2 D_MEM
plugin.perfEst.memory.DPort.region1.end =0xC0000000
plugin.perfEst.memory.DPort.region2.path=D_NON_CACHABLE
plugin.perfEst.memory.DPort.region2.end =0xFFFFFFFFF

plugin.perfEst.memory.IPort.nregions=3
plugin.perfEst.memory.IPort.region0.path=I_MEM
plugin.perfEst.memory.IPort.region0.end =0x80000000
plugin.perfEst.memory.IPort.region1.path=L1I L2 I_MEM
plugin.perfEst.memory.IPort.region1.end =0xC0000000
plugin.perfEst.memory.IPort.region2.path=I_MEM
plugin.perfEst.memory.IPort.region2.end =0xFFFFFFFFF

;; memory instancess
plugin.perfEst.memory.instance.D_MEM.type=memory
plugin.perfEst.memory.instance.D_MEM.delay.read=7
plugin.perfEst.memory.instance.D_MEM.delay.write=7

plugin.perfEst.memory.instance.D_NON_CACHABLE.type=memory
plugin.perfEst.memory.instance.D_NON_CACHABLE.delay.read=9
plugin.perfEst.memory.instance.D_NON_CACHABLE.delay.write=9

plugin.perfEst.memory.instance.I_MEM.type=memory
plugin.perfEst.memory.instance.I_MEM.delay.read=5
; -v-  must be specified even for read only memory -v-
plugin.perfEst.memory.instance.I_MEM.delay.write=5 

plugin.perfEst.memory.instance.NO_MEM.type=memory
plugin.perfEst.memory.instance.NO_MEM.delay.read=1
plugin.perfEst.memory.instance.NO_MEM.delay.write=1

;; replacement strategies:
; LRU    (least recently used)
; MRU    (most recently used)
; PLRU   (bit-PLRU, approximation to LRU)
; FIFO   (evicts entries in the order they were added)
; LIFO   (evicts most recently added entry)
; LFU    (least frequently used)
; LFSR   (pseudo random using 8bit LFSR)
; RANDOM (pseudo random using built-in `rand` method)

;; write policies:
; WB      (write-back, does not support multiple WB caches on same level)
; WB-NA   (write-back no-allocate, write miss forwards write to next level)
; WT      (write-through)
; WT-NA   (write-through no-allocate, write miss forwards write to next level)
; WT-NA-I (write-through no-allocate, invalidates entire cache on write miss)

;; cache instances; ..
; from ICacheModel
plugin.perfEst.memory.instance.L1I.type=cache
plugin.perfEst.memory.instance.L1I.nways=4
plugin.perfEst.memory.instance.L1I.nsets=256
plugin.perfEst.memory.instance.L1I.lineSize=4
plugin.perfEst.memory.instance.L1I.delay.readHit=1
plugin.perfEst.memory.instance.L1I.delay.readMiss=0
plugin.perfEst.memory.instance.L1I.delay.writeHit=1
plugin.perfEst.memory.instance.L1I.delay.writeMiss=0
plugin.perfEst.memory.instance.L1I.replacementStrategy=LFSR
plugin.perfEst.memory.instance.L1I.writePolicy=WT-NA
plugin.perfEst.memory.instance.L1I.invalidationTargets=L1D
; from DCacheModel
plugin.perfEst.memory.instance.L1D.type=cache
plugin.perfEst.memory.instance.L1D.nways=8
plugin.perfEst.memory.instance.L1D.nsets=256
plugin.perfEst.memory.instance.L1D.lineSize=4
plugin.perfEst.memory.instance.L1D.delay.readHit=1
plugin.perfEst.memory.instance.L1D.delay.readMiss=0
plugin.perfEst.memory.instance.L1D.delay.writeHit=1
plugin.perfEst.memory.instance.L1D.delay.writeMiss=0
plugin.perfEst.memory.instance.L1D.replacementStrategy=LFSR
plugin.perfEst.memory.instance.L1D.writePolicy=WT
plugin.perfEst.memory.instance.L1D.invalidationTargets=L1I
; custom
plugin.perfEst.memory.instance.L2.type=cache
plugin.perfEst.memory.instance.L2.nways=4
plugin.perfEst.memory.instance.L2.nsets=1024
plugin.perfEst.memory.instance.L2.lineSize=4
plugin.perfEst.memory.instance.L2.delay.readHit=2
plugin.perfEst.memory.instance.L2.delay.readMiss=2
plugin.perfEst.memory.instance.L2.delay.writeHit=2
plugin.perfEst.memory.instance.L2.delay.writeMiss=2
plugin.perfEst.memory.instance.L2.replacementStrategy=LRU
plugin.perfEst.memory.instance.L2.writePolicy=WB
; -v- no caches to invalidate on write -v-
plugin.perfEst.memory.instance.L2.invalidationTargets= 
